제어 문자
	- 반드시 따옴표 안에서 작성한다.
	\n : new line, 개행 문자,  줄 바꿈
	\t : tab, 위 알래 줄 간격 맞춰 뜨기
	\" : " 를 표현
	\' : ' 를 표현
	\\ : \를 표현

출력 메서드
	print() : 마지막에 자동으로 줄바꿈이 되지 않고 아래의 문장과 이어서 출력된다.
	println() : 마지막에 자동으로 줄바꿈이 된다.
	printf() : 포멧을 이용하여 서식을 바꾼다.

출력 메서드의 목적
	전달받은 데이터 및 전달할 데이터 검사, 오류 발생 지점 구체화 및 검사


------------------------------------------------------------------------


자료형(type, 종류)
	자료형	Type	Byte	값
	정수형	int	4	10, 302, 3321, -1 ... (기본형)
	실수형	float	4	10.5F, -0.9F, 0.0F, ...      (F가 있으면 float이다) 
		double	8	10.5, 0.6, 123.456, ...
	논리형	Boolean	1	true, false
	문자형	char	2	'김', 'A', '0', ... (자바에서는 한글자를 문자형으로 표현한다 '') 
	문자열	String	?	"홍길동", "ABC", "A", ... (문자열값은 ""을 사용한다)


변수 선언 시 주의사항
	1. 같은 이름의 변수로 선언할 수없다,
	2. 초기화를 해준다.
	3. 되도록 선언부에 한꺼번에 선언한다. (영역 상단)


변수명 주의사항
	문자로 시작해야한다. 
	특수문자는 사용할 수 없다. 단, _는 허용한다.
	소문자로 시작한다.
	공백을 사용할 수 없다.
	되도록 한글은 사용하지 않는다.
	명사로 사용한다.
	뜻이 있는 단어를 사용한다.


상수란?
	- 항상 그대로인 수, 값을 변경할 수 없도록 하는 것이 목적이다.

상수를 사용하는 이유
	1) 의미 없는 값에 의미를 부여하기 위한 목적
	2) 오타를 방지하기 위한 목적


문자열의 형변환
	1. 다른 자료형을 문자열로
		- 문자열과 다른 일반 자료형을 연결하면 결과는 문자열이 된다.
	2. 문자열을 다른 자료형으로
		- 일반 자료형은 일반 자료형끼리만 형변환이 가능하다. (String은 일반 자료형이 아니다)
		- 문자열 타입은 클라스 타입이므로, 일반 자료형의 클라스타입의 도움을 받아야 한다.
		- 일반 자료형
		1. int	-> Integer.parseInt()
		2. boolean -> Boolean.parseBoolean()
		3. double -> Double.parseDouble()
		4. float -> Float.parseFloat() 





